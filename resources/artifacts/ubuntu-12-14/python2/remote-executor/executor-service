### BEGIN INIT INFO
# Provides:          executor-service
# Required-Start:
# Required-Stop:
# Default-Start:     2 3 4 5
# Default-Stop:      0 1 6
# Short-Description: Start executor daemon
# Description:       To start-stop DS
### END INIT INFO

RUN_MODE="daemons"

PYTHON=$(which python)
NAME=remote-executor-pid
DAEMONDIR=./
DAEMON=testsExecutor.py
DAEMON_SEND_UUID=sendUUID.py
PIDDIR=/tmp/
PIDFILE=$PIDDIR/daas-pid.pid
PIDFILE_SEND_UUID=$PIDDIR/send-uuid.pid

#there is an unidentified bug with sendUUID starting 2 times for each start-stop daemon

. /lib/lsb/init-functions

case "$1" in
	start)
		log_daemon_msg "Starting executor daemon"
		# Make sure we have our PIDDIR, even if it's on a tmpfs
		# install -o root -g root -m 755 -d $PIDDIR
        if ! start-stop-daemon --start --chdir $DAEMONDIR --quiet --pidfile $PIDFILE --make-pidfile --background --exec $PYTHON -- $DAEMON; then
		    log_end_msg 1
		    exit 1
		fi
		if ! start-stop-daemon --start --chdir $DAEMONDIR --quiet --pidfile $PIDFILE_SEND_UUID --make-pidfile --background --exec $PYTHON -- $DAEMON_SEND_UUID; then
		    log_end_msg 1
		    exit 1
		fi
		log_end_msg 0
		;;
	stop)
	    #for stop we need to actually run this crap in a screen, and gracefully shut down the screeen
		log_daemon_msg "Stopping executor daemon"

		start-stop-daemon --stop --quiet --pidfile $PIDFILE
		# Wait a little and remove stale PID file
		sleep 1
		if [ -f $PIDFILE ] && ! ps h `cat $PIDFILE` > /dev/null
		then
                        PID_PORT=`echo $PIDFILE | rev | cut -d/ -f1 | rev` 
			# Stale PID file (executor was succesfully stopped),
			# remove it
			rm -f $PIDFILE
		fi


		log_end_msg 0
		;;
	restart)
		$0 stop
		sleep 1
		$0 start
		;;
	status)
		pidofproc -p $PIDFILE $PYTHON >/dev/null
		status=$?
		if [ $status -eq 0 ]; then
			log_success_msg "executor is running"
		else
			log_failure_msg "executor is not running"
		fi
		exit $status
		;;
	*)
		echo "Usage: $0 {start|stop|restart|status}"
		exit 1
		;;
esac
 
exit 0

